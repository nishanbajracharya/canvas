#!/usr/bin/env node
require("source-map-support/register"),module.exports=function(n){var e={};function t(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return n[o].call(i.exports,i,i.exports,t),i.l=!0,i.exports}return t.m=n,t.c=e,t.d=function(n,e,o){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:o})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var i in n)t.d(o,i,function(e){return n[e]}.bind(null,i));return o},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="/",t(t.s=1)}([function(n,e){n.exports=require("chalk")},function(n,e,t){n.exports=t(2)},function(n,e,t){const o=t(3),i=t(0),r=t(4).argv,s=t(5),a=t(8),c=r._[0]||a.PROJECT_NAME,l=o.resolve(r._[1]||a.PROJECT_PATH)+"/"+c;console.log(`\n${i.blue.bold("Preparing bootsrap!")}\n\nProject: ${i.green.bold(c)}\nDestination: ${i.green.bold(l)}\n`),s(l,function(){console.log(i.green.bold("All done! Your canvas bootstrap project is ready.")),console.log(`To get started, go to your project directory and open ${i.blue.bold("index.html")}.\n`),console.log(`${i.blue.bold("cd")} ${l}`)},function(n){console.log(n),console.log(i.red.bold("\nBootstrap failed!"))})},function(n,e){n.exports=require("path")},function(n,e){n.exports=require("yargs")},function(n,e,t){const o=t(6),i=t(0),r=t(7);n.exports=function(n,e,t){if(o.existsSync(n))return t(`Couldn't bootstrap project.\n${i.red.bold("Directory already exists.")}`);const s=n,a=n+"/css",c=n+"/js";try{console.log(i.blue.bold("Creating directories")),o.mkdirSync(s),o.mkdirSync(a),o.mkdirSync(c),console.log(i.green.bold("Done!\n")),console.log(i.blue.bold("Creating files")),o.writeFileSync(s+"/index.html",r.html),o.writeFileSync(a+"/reset.min.css",r.css),o.writeFileSync(c+"/canvas.js",r.js),console.log(i.green.bold("Done!\n"))}catch(n){t(`${i.red.bold("An error occured.")}\n${n.message}`)}e()}},function(n,e){n.exports=require("fs")},function(n){n.exports=JSON.parse('{"html":"<!DOCTYPE html>\\n<html lang=\\"en\\">\\n<head>\\n  <meta charset=\\"UTF-8\\">\\n  <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\">\\n  <meta http-equiv=\\"X-UA-Compatible\\" content=\\"ie=edge\\">\\n  <title>Canvas</title>\\n  <link rel=\\"stylesheet\\" href=\\"css/reset.min.css\\">\\n</head>\\n<body>\\n  <canvas id=\\"canvas\\"></canvas>\\n  <script src=\\"js/canvas.js\\"><\/script>\\n</body>\\n</html>","css":"html{font-size:16px;box-sizing:border-box}*,:after,:before{box-sizing:inherit}body,h1,h2,h3,h4,h5,h6,ol,p,ul{margin:0;padding:0;font-weight:400}ol,ul{list-style:none}img{height:auto;max-width:100%}body{margin:0;overflow:hidden;background:#000}","js":"const canvas = document.getElementById(\'canvas\');\\nconst ctx = canvas.getContext(\'2d\');\\n\\nlet WIDTH;\\nlet HEIGHT;\\n\\nfunction init() {\\n  resetCanvasSize(true);\\n\\n  // Reset canvas size when window is resized\\n  window.addEventListener(\'resize\', function() {\\n    resetCanvasSize();\\n  });\\n}\\n\\nfunction resetCanvasSize(initial = false) {\\n  function setSize() {\\n    WIDTH = window.innerWidth;\\n    HEIGHT = window.innerHeight;\\n\\n    canvas.setAttribute(\'width\', WIDTH);\\n    canvas.setAttribute(\'height\', HEIGHT);\\n\\n    canvas.style.width = WIDTH + \'px\';\\n    canvas.style.height = HEIGHT + \'px\';\\n  }\\n\\n  if (initial) {\\n    // window.innerHeight can be incorrect at the beginning of the page\\n    // So we get the values on the second cycle of the event loop so that\\n    // accurate values will be received.\\n    // This is only necessary for the initialization of the canvas\\n    setTimeout(setSize);\\n    return;\\n  }\\n\\n  setSize();\\n}\\n\\nfunction run() {\\n  // Clear canvas\\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\\n\\n  // Fill canvas with black\\n  ctx.rect(0, 0, canvas.width, canvas.height);\\n  ctx.fillStyle = \'#000\';\\n  ctx.fill();\\n\\n  // Sample Text\\n  ctx.rect(canvas.width / 2 - 200, canvas.height / 2 - 50, 400, 100);\\n  ctx.lineWidth = 2;\\n  ctx.strokeStyle = \'#fff\';\\n  ctx.stroke();\\n\\n  ctx.font = \'16px Arial\';\\n  ctx.fillStyle = \'#fff\';\\n  ctx.textAlign = \\"center\\";\\n  ctx.fillText(\'Open \\"js/canvas.js\\" in a text editor to get started.\', canvas.width / 2, canvas.height / 2 + 8);\\n\\n  // Add rendering code here\\n\\n  // Redraw canvas\\n  window.requestAnimationFrame(run);\\n}\\n\\ninit();\\nrun();\\n"}')},function(n,e){n.exports={PROJECT_NAME:"canvas",PROJECT_PATH:"./",TEMPLATE:{HTML:"./template/index.html",CSS:"./template/css/reset.min.css",JS:"./template/js/canvas.js"}}}]);